import java.util.ArrayList;
import java.util.Scanner;

class Student {
    private String name;
    private int rollNumber;
    private String grade;
    private String email;

    // Constructor to initialize a student
    public Student(String name, int rollNumber, String grade, String email) {
        this.name = name;
        this.rollNumber = rollNumber;
        this.grade = grade;
        this.email = email;
    }

    // Getters and setters for student attributes
    public String getName() {
        return name;
    }

    public int getRollNumber() {
        return rollNumber;
    }

    public String getGrade() {
        return grade;
    }

    public String getEmail() {
        return email;
    }

    @Override
    public String toString() {
        return "Roll Number: " + rollNumber + ", Name: " + name + ", Grade: " + grade + ", Email: " + email;
    }
}

class StudentManagementSystem {
    private ArrayList<Student> students;
    private Scanner scanner;

    public StudentManagementSystem() {
        students = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    // Add a student to the system
    public void addStudent() {
        System.out.println("Enter student name:");
        String name = scanner.nextLine();
        System.out.println("Enter roll number:");
        int rollNumber = Integer.parseInt(scanner.nextLine());
        System.out.println("Enter grade:");
        String grade = scanner.nextLine();
        System.out.println("Enter email:");
        String email = scanner.nextLine();

        // Validate email format
        if (!email.contains("@")) {
            System.out.println("Invalid email format. Please try again.");
            return;
        }

        Student student = new Student(name, rollNumber, grade, email);
        students.add(student);
        System.out.println("Student added successfully!");
    }

    // Remove a student by roll number
    public void removeStudent() {
        System.out.println("Enter roll number of the student to remove:");
        int rollNumber = Integer.parseInt(scanner.nextLine());
        boolean removed = false;

        for (Student student : students) {
            if (student.getRollNumber() == rollNumber) {
                students.remove(student);
                removed = true;
                System.out.println("Student removed successfully.");
                break;
            }
        }

        if (!removed) {
            System.out.println("Student not found.");
        }
    }

    // Search for a student by roll number
    public void searchStudent() {
        System.out.println("Enter roll number to search for a student:");
        int rollNumber = Integer.parseInt(scanner.nextLine());

        for (Student student : students) {
            if (student.getRollNumber() == rollNumber) {
                System.out.println(student);
                return;
            }
        }

        System.out.println("Student not found.");
    }

    // Display all students
    public void displayAllStudents() {
        if (students.isEmpty()) {
            System.out.println("No students available.");
        } else {
            System.out.println("\nList of all students:");
            for (Student student : students) {
                System.out.println(student);
            }
        }
    }

    // Method for the user interface/menu
    public void displayMenu() {
        while (true) {
            System.out.println("\nStudent Management System");
            System.out.println("1. Add Student");
            System.out.println("2. Remove Student");
            System.out.println("3. Search Student");
            System.out.println("4. Display All Students");
            System.out.println("5. Exit");

            System.out.print("Choose an option (1-5): ");
            int choice = Integer.parseInt(scanner.nextLine());

            switch (choice) {
                case 1:
                    addStudent();
                    break;
                case 2:
                    removeStudent();
                    break;
                case 3:
                    searchStudent();
                    break;
                case 4:
                    displayAllStudents();
                    break;
                case 5:
                    System.out.println("Exiting system...");
                    return;
                default:
                    System.out.println("Invalid choice, please try again.");
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        StudentManagementSystem sms = new StudentManagementSystem();
        sms.displayMenu();
    }
}
